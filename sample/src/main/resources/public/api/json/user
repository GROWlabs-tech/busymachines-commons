{
  "apiVersion":"0.2",
  "swaggerVersion":"1.1",
  "basePath":"/v1",
  "resourcePath":"/user",
  "apis":[
    {
      "path":"/users/{username}/authentication",
      "description":"Users authentication",
      "operations":[
        {
          "httpMethod":"GET",
          "summary":"Check if a specific user is authenticated",
          "responseClass":"Response",
          "nickname":"checkStatus",
          "parameters":[
             {
              "name":"Auth-Token",
              "description":"Token received when doing logged-in.",
              "paramType":"header",
              "required":true,
              "allowMultiple":false,
              "dataType":"string"
            },{
              "name":"username",
              "description":"Username to do the checking against",
              "paramType":"path",
              "required":true,
              "allowMultiple":false,
              "dataType":"string"
            }
          ],
          "errorResponses":[
            {
              "code":200,
              "reason":"User is logged in."
            },
            {
              "code":404,
              "reason":"User is not logged in."
            }
          ]
        },
        {
          "httpMethod":"POST",
          "summary":"Log-in a specific user",
          "responseClass":"UserGet",
          "nickname":"loginUser",
          "parameters":[
            {
              "name":"username",
              "description":"Username to do the login operation for",
              "paramType":"path",
              "required":true,
              "allowMultiple":false,
              "dataType":"string"
            },
            {
              "name":"password",
              "description":"Password of the user",
              "paramType":"body",
              "required":true,
              "allowMultiple":false,
              "dataType":"AuthenticationUser"
            }
          ],
          "errorResponses":[
            {
              "code":200,
              "reason":"User has been successfully logged in."
            },
            {
              "code":404,
              "reason":"Invalid username or password."
            }
          ]
        },
        {
          "httpMethod":"DELETE",
          "summary":"Log-out a specific user",
          "responseClass":"Response",
          "nickname":"logoutUser",
          "parameters":[
            {
              "name":"Auth-Token",
              "description":"Token received when doing logged-in.",
              "paramType":"header",
              "required":true,
              "allowMultiple":false,
              "dataType":"string"
            },{
              "name":"username",
              "description":"Username to do the log-out against",
              "paramType":"path",
              "required":true,
              "allowMultiple":false,
              "dataType":"string"
            }
          ],
          "errorResponses":[
            {
              "code":200,
              "reason":"User has been successfully logged out."
            },
            {
              "code":404,
              "reason":"User is not logged in."
            }
          ]
        }
      ]
    },{
    "path":"/users/{userId}",
      "description":"Update a specific user by id",
      "operations":[
	    {
          "httpMethod":"PUT",
          "summary":"Update a specific user",
          "responseClass":"None",
          "nickname":"updateUser",
          "parameters":[
             {
              "name":"Auth-Token",
              "description":"Token received when doing logged-in.",
              "paramType":"header",
              "required":true,
              "allowMultiple":false,
              "dataType":"string"
            },{
              "name":"userId",
              "description":"Id of the user to be updated",
              "paramType":"path",
              "required":true,
              "allowMultiple":false,
              "dataType":"string"
            },{
              "name":"user",
              "description":"user fields",
              "paramType":"body",
              "required":true,
              "allowMultiple":false,
              "dataType":"UserUpdate"
            }
        	],
          "errorResponses":[
            {
              "code":200,
              "reason":"User was succesfully updated."
            },
            {
              "code":400,
              "reason":"InvalidIdException."
            }
	      	]
	      }
  ]
  }
  ],
  "models":
 {
    "Response":{
      "id":"Response",
      "properties":{
        "message":{
          "type":"String"
        }
      }
    },
   	"AuthenticationUser":{
      "id":"AuthenticationUser",
      "properties":{
        "password":{
          "type":"String"
        },
        "partyName":{
            "type":"String"
        }
      }
    },
   	"UserUpdate":{
      "id":"UserUpdate",
      "properties":{
        "name":{
          "type":"String"
        }, 
        "loginName":{
          "type":"String"
        }, 
        "password":{
          "type":"String"
        }, 
        "email":{
          "type":"String"
        }, 
        "phone":{
          "type":"String"
        }, 
        "mobilePhone":{
          "type":"String"
        }, 
        "function":{
          "type":"String"
        }
      }
    },
    "UserGet":{
      "id":"UserGet",
      "properties":{
		"id":{
          "type":"Int"
        },          
        "name":{
          "type":"String"
        }, 
        "loginName":{
          "type":"String"
        }, 
        "email":{
          "type":"String"
        }, 
        "phone":{
          "type":"String"
        }, 
        "mobilePhone":{
          "type":"String"
        }, 
        "function":{
          "type":"String"
        },
        "id":{
          "type":"Int"
        }
      }
    }
  }
}